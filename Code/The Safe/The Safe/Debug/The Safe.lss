
The Safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bcc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00000bcc  00000c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00001420  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d7c  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b6  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000851  00000000  00000000  00002752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000284  00000000  00000000  00002fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  00003228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b6d  00000000  00000000  00003557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3e       	cpi	r26, 0xE6	; 230
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 ee       	ldi	r26, 0xE6	; 230
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3e       	cpi	r26, 0xE6	; 230
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <main>
  8a:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPinDir>:
#include "MACROS.h"
#include <avr/io.h>

void DIO_vsetPinDir(unsigned char portname, unsigned char pinnumber, unsigned char direction)
{
	switch(portname)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetPinDir+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_vsetPinDir+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vsetPinDir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vsetPinDir+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vsetPinDir+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_vsetPinDir+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_vsetPinDir+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vsetPinDir+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vsetPinDir+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vsetPinDir+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vsetPinDir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vsetPinDir+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vsetPinDir+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vsetPinDir+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vsetPinDir+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_vsetPinDir+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_vsetPinDir+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vsetPinDir+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_vsetPinDir+0xe8>
	{
		case 'A':
		case 'a':
			if(direction == 1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_vsetPinDir+0x58>
			{
				SET_BIT(DDRA, pinnumber);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vsetPinDir+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vsetPinDir+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRA, pinnumber);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vsetPinDir+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vsetPinDir+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if(direction == 1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_vsetPinDir+0x92>
			{
				SET_BIT(DDRB, pinnumber);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vsetPinDir+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vsetPinDir+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRB, pinnumber);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vsetPinDir+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vsetPinDir+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if(direction == 1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_vsetPinDir+0xcc>
			{
				SET_BIT(DDRC, pinnumber);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vsetPinDir+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vsetPinDir+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRC, pinnumber);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetPinDir+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetPinDir+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if(direction == 1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vsetPinDir+0x106>
			{
				SET_BIT(DDRD, pinnumber);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vsetPinDir+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vsetPinDir+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD, pinnumber);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vsetPinDir+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vsetPinDir+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_vWritePin>:
	}
}

void DIO_vWritePin(unsigned char portname, unsigned char pinnumber, unsigned char output_value)
{
	switch(portname)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vWritePin+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_vWritePin+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vWritePin+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vWritePin+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vWritePin+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_vWritePin+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vWritePin+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vWritePin+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vWritePin+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vWritePin+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vWritePin+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vWritePin+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vWritePin+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vWritePin+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vWritePin+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_vWritePin+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vWritePin+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vWritePin+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_vWritePin+0xe8>
	{
		case 'A':
		case 'a':
			if(output_value == 1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vWritePin+0x58>
			{
				SET_BIT(PORTA, pinnumber);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vWritePin+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vWritePin+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA, pinnumber);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vWritePin+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vWritePin+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if(output_value == 1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vWritePin+0x92>
			{
				SET_BIT(PORTB, pinnumber);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vWritePin+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vWritePin+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB, pinnumber);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vWritePin+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vWritePin+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if(output_value == 1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_vWritePin+0xcc>
			{
				SET_BIT(PORTC, pinnumber);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vWritePin+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vWritePin+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC, pinnumber);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vWritePin+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vWritePin+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
			}	
			break;
		case 'D':
		case 'd':
			if(output_value == 1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vWritePin+0x106>
			{
				SET_BIT(PORTD, pinnumber);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vWritePin+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vWritePin+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
			}			
			else
			{
				CLR_BIT(PORTD, pinnumber);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vWritePin+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vWritePin+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_vTogglePin>:
	}
}

void DIO_vTogglePin(unsigned char portname, unsigned char pinnumber)
{
	switch(portname)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_vTogglePin+0x6>
 2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_vTogglePin+0x80>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_vTogglePin+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_vTogglePin+0x4c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_vTogglePin+0x66>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_vTogglePin+0x18>
 2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_vTogglePin+0x98>
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_vTogglePin+0x32>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_vTogglePin+0x4c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_vTogglePin+0x28>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_vTogglePin+0x98>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_vTogglePin+0x32>
 2fe:	83 36       	cpi	r24, 0x63	; 99
 300:	e9 f0       	breq	.+58     	; 0x33c <DIO_vTogglePin+0x66>
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	a1 f5       	brne	.+104    	; 0x36e <DIO_vTogglePin+0x98>
 306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_vTogglePin+0x80>
	{
		case 'A':
		case 'a':
			TOG_BIT(PORTA, pinnumber);
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_vTogglePin+0x40>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_vTogglePin+0x3c>
 31a:	ba 01       	movw	r22, r20
 31c:	62 27       	eor	r22, r18
 31e:	6b bb       	out	0x1b, r22	; 27
			break;
 320:	08 95       	ret
		case 'B':
		case 'b':
			TOG_BIT(PORTB, pinnumber);
 322:	28 b3       	in	r18, 0x18	; 24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ac 01       	movw	r20, r24
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_vTogglePin+0x5a>
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_vTogglePin+0x56>
 334:	ba 01       	movw	r22, r20
 336:	62 27       	eor	r22, r18
 338:	68 bb       	out	0x18, r22	; 24
			break;
 33a:	08 95       	ret
		case 'C':
		case 'c':
			TOG_BIT(PORTC, pinnumber);
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_vTogglePin+0x74>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_vTogglePin+0x70>
 34e:	ba 01       	movw	r22, r20
 350:	62 27       	eor	r22, r18
 352:	65 bb       	out	0x15, r22	; 21
			break;
 354:	08 95       	ret
		case 'D':
		case 'd':
			TOG_BIT(PORTD, pinnumber);
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	ac 01       	movw	r20, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_vTogglePin+0x8e>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_vTogglePin+0x8a>
 368:	ba 01       	movw	r22, r20
 36a:	62 27       	eor	r22, r18
 36c:	62 bb       	out	0x12, r22	; 18
 36e:	08 95       	ret

00000370 <DIO_u8ReadPin>:
}

unsigned char DIO_u8ReadPin(unsigned char portname, unsigned char pinnumber)
{
	unsigned char return_value = 0;
	switch(portname)
 370:	84 34       	cpi	r24, 0x44	; 68
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_u8ReadPin+0x6>
 374:	4e c0       	rjmp	.+156    	; 0x412 <DIO_u8ReadPin+0xa2>
 376:	85 34       	cpi	r24, 0x45	; 69
 378:	40 f4       	brcc	.+16     	; 0x38a <DIO_u8ReadPin+0x1a>
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	31 f1       	breq	.+76     	; 0x3ca <DIO_u8ReadPin+0x5a>
 37e:	83 34       	cpi	r24, 0x43	; 67
 380:	b0 f5       	brcc	.+108    	; 0x3ee <DIO_u8ReadPin+0x7e>
 382:	81 34       	cpi	r24, 0x41	; 65
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_u8ReadPin+0x18>
 386:	57 c0       	rjmp	.+174    	; 0x436 <DIO_u8ReadPin+0xc6>
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <DIO_u8ReadPin+0x36>
 38a:	82 36       	cpi	r24, 0x62	; 98
 38c:	f1 f0       	breq	.+60     	; 0x3ca <DIO_u8ReadPin+0x5a>
 38e:	83 36       	cpi	r24, 0x63	; 99
 390:	20 f4       	brcc	.+8      	; 0x39a <DIO_u8ReadPin+0x2a>
 392:	81 36       	cpi	r24, 0x61	; 97
 394:	09 f0       	breq	.+2      	; 0x398 <DIO_u8ReadPin+0x28>
 396:	4f c0       	rjmp	.+158    	; 0x436 <DIO_u8ReadPin+0xc6>
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <DIO_u8ReadPin+0x36>
 39a:	83 36       	cpi	r24, 0x63	; 99
 39c:	41 f1       	breq	.+80     	; 0x3ee <DIO_u8ReadPin+0x7e>
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <DIO_u8ReadPin+0x34>
 3a2:	49 c0       	rjmp	.+146    	; 0x436 <DIO_u8ReadPin+0xc6>
 3a4:	36 c0       	rjmp	.+108    	; 0x412 <DIO_u8ReadPin+0xa2>
	{
		case 'A':
		case 'a':
			return_value = READ_BIT(PINA, pinnumber);
 3a6:	29 b3       	in	r18, 0x19	; 25
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	06 2e       	mov	r0, r22
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_u8ReadPin+0x44>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_u8ReadPin+0x40>
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	82 23       	and	r24, r18
 3bc:	93 23       	and	r25, r19
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8ReadPin+0x54>
 3c0:	95 95       	asr	r25
 3c2:	87 95       	ror	r24
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8ReadPin+0x50>
			break;
 3c8:	08 95       	ret
		case 'B':
		case 'b':
			return_value = READ_BIT(PINB, pinnumber);
 3ca:	26 b3       	in	r18, 0x16	; 22
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	06 2e       	mov	r0, r22
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_u8ReadPin+0x68>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_u8ReadPin+0x64>
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	82 23       	and	r24, r18
 3e0:	93 23       	and	r25, r19
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_u8ReadPin+0x78>
 3e4:	95 95       	asr	r25
 3e6:	87 95       	ror	r24
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_u8ReadPin+0x74>
			break;
 3ec:	08 95       	ret
		case 'C':
		case 'c':
			return_value = READ_BIT(PINC, pinnumber);
 3ee:	23 b3       	in	r18, 0x13	; 19
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	06 2e       	mov	r0, r22
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_u8ReadPin+0x8c>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_u8ReadPin+0x88>
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	82 23       	and	r24, r18
 404:	93 23       	and	r25, r19
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_u8ReadPin+0x9c>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_u8ReadPin+0x98>
			break;
 410:	08 95       	ret
		case 'D':
		case 'd':
			return_value = READ_BIT(PIND, pinnumber);
 412:	20 b3       	in	r18, 0x10	; 16
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	06 2e       	mov	r0, r22
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_u8ReadPin+0xb0>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_u8ReadPin+0xac>
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	82 23       	and	r24, r18
 428:	93 23       	and	r25, r19
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_u8ReadPin+0xc0>
 42c:	95 95       	asr	r25
 42e:	87 95       	ror	r24
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_u8ReadPin+0xbc>
			break;
 434:	08 95       	ret
	}
}

unsigned char DIO_u8ReadPin(unsigned char portname, unsigned char pinnumber)
{
	unsigned char return_value = 0;
 436:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			break;
	}
	return return_value;
}
 438:	08 95       	ret

0000043a <DIO_vSetPortDirection>:

void DIO_vSetPortDirection(unsigned char portname, unsigned char direction)
{
	switch(portname)
 43a:	84 34       	cpi	r24, 0x44	; 68
 43c:	d9 f0       	breq	.+54     	; 0x474 <DIO_vSetPortDirection+0x3a>
 43e:	85 34       	cpi	r24, 0x45	; 69
 440:	38 f4       	brcc	.+14     	; 0x450 <DIO_vSetPortDirection+0x16>
 442:	82 34       	cpi	r24, 0x42	; 66
 444:	99 f0       	breq	.+38     	; 0x46c <DIO_vSetPortDirection+0x32>
 446:	83 34       	cpi	r24, 0x43	; 67
 448:	98 f4       	brcc	.+38     	; 0x470 <DIO_vSetPortDirection+0x36>
 44a:	81 34       	cpi	r24, 0x41	; 65
 44c:	a1 f4       	brne	.+40     	; 0x476 <DIO_vSetPortDirection+0x3c>
 44e:	0c c0       	rjmp	.+24     	; 0x468 <DIO_vSetPortDirection+0x2e>
 450:	82 36       	cpi	r24, 0x62	; 98
 452:	61 f0       	breq	.+24     	; 0x46c <DIO_vSetPortDirection+0x32>
 454:	83 36       	cpi	r24, 0x63	; 99
 456:	18 f4       	brcc	.+6      	; 0x45e <DIO_vSetPortDirection+0x24>
 458:	81 36       	cpi	r24, 0x61	; 97
 45a:	69 f4       	brne	.+26     	; 0x476 <DIO_vSetPortDirection+0x3c>
 45c:	05 c0       	rjmp	.+10     	; 0x468 <DIO_vSetPortDirection+0x2e>
 45e:	83 36       	cpi	r24, 0x63	; 99
 460:	39 f0       	breq	.+14     	; 0x470 <DIO_vSetPortDirection+0x36>
 462:	84 36       	cpi	r24, 0x64	; 100
 464:	41 f4       	brne	.+16     	; 0x476 <DIO_vSetPortDirection+0x3c>
 466:	06 c0       	rjmp	.+12     	; 0x474 <DIO_vSetPortDirection+0x3a>
	{
		case 'A':
		case 'a':
			DDRA = direction;
 468:	6a bb       	out	0x1a, r22	; 26
			break;
 46a:	08 95       	ret
		case 'B':
		case 'b':
			DDRB = direction;
 46c:	67 bb       	out	0x17, r22	; 23
			break;
 46e:	08 95       	ret
		case 'C':
		case 'c':
			DDRC = direction;
 470:	64 bb       	out	0x14, r22	; 20
			break;
 472:	08 95       	ret
		case 'D':
		case 'd':
			DDRD = direction;
 474:	61 bb       	out	0x11, r22	; 17
 476:	08 95       	ret

00000478 <DIO_vWritePort>:
	}
}

void DIO_vWritePort(unsigned char portname, unsigned char portvalue)
{
	switch(portname)
 478:	84 34       	cpi	r24, 0x44	; 68
 47a:	d9 f0       	breq	.+54     	; 0x4b2 <DIO_vWritePort+0x3a>
 47c:	85 34       	cpi	r24, 0x45	; 69
 47e:	38 f4       	brcc	.+14     	; 0x48e <DIO_vWritePort+0x16>
 480:	82 34       	cpi	r24, 0x42	; 66
 482:	99 f0       	breq	.+38     	; 0x4aa <DIO_vWritePort+0x32>
 484:	83 34       	cpi	r24, 0x43	; 67
 486:	98 f4       	brcc	.+38     	; 0x4ae <DIO_vWritePort+0x36>
 488:	81 34       	cpi	r24, 0x41	; 65
 48a:	a1 f4       	brne	.+40     	; 0x4b4 <DIO_vWritePort+0x3c>
 48c:	0c c0       	rjmp	.+24     	; 0x4a6 <DIO_vWritePort+0x2e>
 48e:	82 36       	cpi	r24, 0x62	; 98
 490:	61 f0       	breq	.+24     	; 0x4aa <DIO_vWritePort+0x32>
 492:	83 36       	cpi	r24, 0x63	; 99
 494:	18 f4       	brcc	.+6      	; 0x49c <DIO_vWritePort+0x24>
 496:	81 36       	cpi	r24, 0x61	; 97
 498:	69 f4       	brne	.+26     	; 0x4b4 <DIO_vWritePort+0x3c>
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <DIO_vWritePort+0x2e>
 49c:	83 36       	cpi	r24, 0x63	; 99
 49e:	39 f0       	breq	.+14     	; 0x4ae <DIO_vWritePort+0x36>
 4a0:	84 36       	cpi	r24, 0x64	; 100
 4a2:	41 f4       	brne	.+16     	; 0x4b4 <DIO_vWritePort+0x3c>
 4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <DIO_vWritePort+0x3a>
	{
		case 'A':
		case 'a':
			PORTA = portvalue;
 4a6:	6b bb       	out	0x1b, r22	; 27
			break;
 4a8:	08 95       	ret
		case 'B':
		case 'b':
			PORTB = portvalue;
 4aa:	68 bb       	out	0x18, r22	; 24
			break;
 4ac:	08 95       	ret
		case 'C':
		case 'c':
			PORTC = portvalue;
 4ae:	65 bb       	out	0x15, r22	; 21
			break;
 4b0:	08 95       	ret
		case 'D':
		case 'd':
			PORTD = portvalue;
 4b2:	62 bb       	out	0x12, r22	; 18
 4b4:	08 95       	ret

000004b6 <DIO_u8ReadPort>:
}

unsigned char DIO_u8ReadPort(unsigned char portname)
{
	unsigned char return_value = 0;
	switch(portname)
 4b6:	84 34       	cpi	r24, 0x44	; 68
 4b8:	d9 f0       	breq	.+54     	; 0x4f0 <DIO_u8ReadPort+0x3a>
 4ba:	85 34       	cpi	r24, 0x45	; 69
 4bc:	38 f4       	brcc	.+14     	; 0x4cc <DIO_u8ReadPort+0x16>
 4be:	82 34       	cpi	r24, 0x42	; 66
 4c0:	99 f0       	breq	.+38     	; 0x4e8 <DIO_u8ReadPort+0x32>
 4c2:	83 34       	cpi	r24, 0x43	; 67
 4c4:	98 f4       	brcc	.+38     	; 0x4ec <DIO_u8ReadPort+0x36>
 4c6:	81 34       	cpi	r24, 0x41	; 65
 4c8:	a9 f4       	brne	.+42     	; 0x4f4 <DIO_u8ReadPort+0x3e>
 4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <DIO_u8ReadPort+0x2e>
 4cc:	82 36       	cpi	r24, 0x62	; 98
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <DIO_u8ReadPort+0x32>
 4d0:	83 36       	cpi	r24, 0x63	; 99
 4d2:	18 f4       	brcc	.+6      	; 0x4da <DIO_u8ReadPort+0x24>
 4d4:	81 36       	cpi	r24, 0x61	; 97
 4d6:	71 f4       	brne	.+28     	; 0x4f4 <DIO_u8ReadPort+0x3e>
 4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <DIO_u8ReadPort+0x2e>
 4da:	83 36       	cpi	r24, 0x63	; 99
 4dc:	39 f0       	breq	.+14     	; 0x4ec <DIO_u8ReadPort+0x36>
 4de:	84 36       	cpi	r24, 0x64	; 100
 4e0:	49 f4       	brne	.+18     	; 0x4f4 <DIO_u8ReadPort+0x3e>
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <DIO_u8ReadPort+0x3a>
	{
		case 'A':
		case 'a':
			return_value = PINA;
 4e4:	89 b3       	in	r24, 0x19	; 25
			break;
 4e6:	08 95       	ret
		case 'B':
		case 'b':
			return_value = PINB;
 4e8:	86 b3       	in	r24, 0x16	; 22
			break;
 4ea:	08 95       	ret
		case 'C':
		case 'c':
			return_value = PINC;
 4ec:	83 b3       	in	r24, 0x13	; 19
			break;
 4ee:	08 95       	ret
		case 'D':
		case 'd':
			return_value = PIND;
 4f0:	80 b3       	in	r24, 0x10	; 16
			break;
 4f2:	08 95       	ret
	}
}

unsigned char DIO_u8ReadPort(unsigned char portname)
{
	unsigned char return_value = 0;
 4f4:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			break;
	}
	return return_value;
}
 4f6:	08 95       	ret

000004f8 <DIO_vTogglePort>:

void DIO_vTogglePort(unsigned char portname)
{
	switch (portname)
 4f8:	84 34       	cpi	r24, 0x44	; 68
 4fa:	09 f1       	breq	.+66     	; 0x53e <DIO_vTogglePort+0x46>
 4fc:	85 34       	cpi	r24, 0x45	; 69
 4fe:	38 f4       	brcc	.+14     	; 0x50e <DIO_vTogglePort+0x16>
 500:	82 34       	cpi	r24, 0x42	; 66
 502:	a9 f0       	breq	.+42     	; 0x52e <DIO_vTogglePort+0x36>
 504:	83 34       	cpi	r24, 0x43	; 67
 506:	b8 f4       	brcc	.+46     	; 0x536 <DIO_vTogglePort+0x3e>
 508:	81 34       	cpi	r24, 0x41	; 65
 50a:	e1 f4       	brne	.+56     	; 0x544 <DIO_vTogglePort+0x4c>
 50c:	0c c0       	rjmp	.+24     	; 0x526 <DIO_vTogglePort+0x2e>
 50e:	82 36       	cpi	r24, 0x62	; 98
 510:	71 f0       	breq	.+28     	; 0x52e <DIO_vTogglePort+0x36>
 512:	83 36       	cpi	r24, 0x63	; 99
 514:	18 f4       	brcc	.+6      	; 0x51c <DIO_vTogglePort+0x24>
 516:	81 36       	cpi	r24, 0x61	; 97
 518:	a9 f4       	brne	.+42     	; 0x544 <DIO_vTogglePort+0x4c>
 51a:	05 c0       	rjmp	.+10     	; 0x526 <DIO_vTogglePort+0x2e>
 51c:	83 36       	cpi	r24, 0x63	; 99
 51e:	59 f0       	breq	.+22     	; 0x536 <DIO_vTogglePort+0x3e>
 520:	84 36       	cpi	r24, 0x64	; 100
 522:	81 f4       	brne	.+32     	; 0x544 <DIO_vTogglePort+0x4c>
 524:	0c c0       	rjmp	.+24     	; 0x53e <DIO_vTogglePort+0x46>
	{
		case 'A':
		case 'a':
			PORTA = ~PORTA;
 526:	8b b3       	in	r24, 0x1b	; 27
 528:	80 95       	com	r24
 52a:	8b bb       	out	0x1b, r24	; 27
			break;
 52c:	08 95       	ret
		case 'B':
		case 'b':
			PORTB = ~PORTB;
 52e:	88 b3       	in	r24, 0x18	; 24
 530:	80 95       	com	r24
 532:	88 bb       	out	0x18, r24	; 24
			break;
 534:	08 95       	ret
		case 'C':
		case 'c':
			PORTC = ~PORTC;
 536:	85 b3       	in	r24, 0x15	; 21
 538:	80 95       	com	r24
 53a:	85 bb       	out	0x15, r24	; 21
			break;
 53c:	08 95       	ret
		case 'D':
		case 'd':
			PORTD = ~PORTD;
 53e:	82 b3       	in	r24, 0x12	; 18
 540:	80 95       	com	r24
 542:	82 bb       	out	0x12, r24	; 18
 544:	08 95       	ret

00000546 <DIO_vConnectInternalPullUp>:
	}
}

void DIO_vConnectInternalPullUp(unsigned char portname, unsigned char pinnumber, unsigned char enable)
{
	switch(portname)
 546:	84 34       	cpi	r24, 0x44	; 68
 548:	09 f4       	brne	.+2      	; 0x54c <DIO_vConnectInternalPullUp+0x6>
 54a:	71 c0       	rjmp	.+226    	; 0x62e <DIO_vConnectInternalPullUp+0xe8>
 54c:	85 34       	cpi	r24, 0x45	; 69
 54e:	48 f4       	brcc	.+18     	; 0x562 <DIO_vConnectInternalPullUp+0x1c>
 550:	82 34       	cpi	r24, 0x42	; 66
 552:	99 f1       	breq	.+102    	; 0x5ba <DIO_vConnectInternalPullUp+0x74>
 554:	83 34       	cpi	r24, 0x43	; 67
 556:	08 f0       	brcs	.+2      	; 0x55a <DIO_vConnectInternalPullUp+0x14>
 558:	4d c0       	rjmp	.+154    	; 0x5f4 <DIO_vConnectInternalPullUp+0xae>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	09 f0       	breq	.+2      	; 0x560 <DIO_vConnectInternalPullUp+0x1a>
 55e:	83 c0       	rjmp	.+262    	; 0x666 <DIO_vConnectInternalPullUp+0x120>
 560:	0f c0       	rjmp	.+30     	; 0x580 <DIO_vConnectInternalPullUp+0x3a>
 562:	82 36       	cpi	r24, 0x62	; 98
 564:	51 f1       	breq	.+84     	; 0x5ba <DIO_vConnectInternalPullUp+0x74>
 566:	83 36       	cpi	r24, 0x63	; 99
 568:	20 f4       	brcc	.+8      	; 0x572 <DIO_vConnectInternalPullUp+0x2c>
 56a:	81 36       	cpi	r24, 0x61	; 97
 56c:	09 f0       	breq	.+2      	; 0x570 <DIO_vConnectInternalPullUp+0x2a>
 56e:	7b c0       	rjmp	.+246    	; 0x666 <DIO_vConnectInternalPullUp+0x120>
 570:	07 c0       	rjmp	.+14     	; 0x580 <DIO_vConnectInternalPullUp+0x3a>
 572:	83 36       	cpi	r24, 0x63	; 99
 574:	09 f4       	brne	.+2      	; 0x578 <DIO_vConnectInternalPullUp+0x32>
 576:	3e c0       	rjmp	.+124    	; 0x5f4 <DIO_vConnectInternalPullUp+0xae>
 578:	84 36       	cpi	r24, 0x64	; 100
 57a:	09 f0       	breq	.+2      	; 0x57e <DIO_vConnectInternalPullUp+0x38>
 57c:	74 c0       	rjmp	.+232    	; 0x666 <DIO_vConnectInternalPullUp+0x120>
 57e:	57 c0       	rjmp	.+174    	; 0x62e <DIO_vConnectInternalPullUp+0xe8>
	{
		case 'A':
		case 'a':
			if(enable == 1)
 580:	41 30       	cpi	r20, 0x01	; 1
 582:	69 f4       	brne	.+26     	; 0x59e <DIO_vConnectInternalPullUp+0x58>
			{
				SET_BIT(PORTA, pinnumber);
 584:	2b b3       	in	r18, 0x1b	; 27
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	ac 01       	movw	r20, r24
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_vConnectInternalPullUp+0x4c>
 58e:	44 0f       	add	r20, r20
 590:	55 1f       	adc	r21, r21
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_vConnectInternalPullUp+0x48>
 596:	ba 01       	movw	r22, r20
 598:	62 2b       	or	r22, r18
 59a:	6b bb       	out	0x1b, r22	; 27
 59c:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA, pinnumber);
 59e:	2b b3       	in	r18, 0x1b	; 27
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	ac 01       	movw	r20, r24
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_vConnectInternalPullUp+0x66>
 5a8:	44 0f       	add	r20, r20
 5aa:	55 1f       	adc	r21, r21
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_vConnectInternalPullUp+0x62>
 5b0:	ba 01       	movw	r22, r20
 5b2:	60 95       	com	r22
 5b4:	62 23       	and	r22, r18
 5b6:	6b bb       	out	0x1b, r22	; 27
 5b8:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if(enable == 1)
 5ba:	41 30       	cpi	r20, 0x01	; 1
 5bc:	69 f4       	brne	.+26     	; 0x5d8 <DIO_vConnectInternalPullUp+0x92>
			{
				SET_BIT(PORTB, pinnumber);
 5be:	28 b3       	in	r18, 0x18	; 24
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	ac 01       	movw	r20, r24
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_vConnectInternalPullUp+0x86>
 5c8:	44 0f       	add	r20, r20
 5ca:	55 1f       	adc	r21, r21
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_vConnectInternalPullUp+0x82>
 5d0:	ba 01       	movw	r22, r20
 5d2:	62 2b       	or	r22, r18
 5d4:	68 bb       	out	0x18, r22	; 24
 5d6:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB, pinnumber);
 5d8:	28 b3       	in	r18, 0x18	; 24
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	ac 01       	movw	r20, r24
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_vConnectInternalPullUp+0xa0>
 5e2:	44 0f       	add	r20, r20
 5e4:	55 1f       	adc	r21, r21
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_vConnectInternalPullUp+0x9c>
 5ea:	ba 01       	movw	r22, r20
 5ec:	60 95       	com	r22
 5ee:	62 23       	and	r22, r18
 5f0:	68 bb       	out	0x18, r22	; 24
 5f2:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if(enable == 1)
 5f4:	41 30       	cpi	r20, 0x01	; 1
 5f6:	69 f4       	brne	.+26     	; 0x612 <DIO_vConnectInternalPullUp+0xcc>
			{
				SET_BIT(PORTC, pinnumber);
 5f8:	25 b3       	in	r18, 0x15	; 21
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	ac 01       	movw	r20, r24
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_vConnectInternalPullUp+0xc0>
 602:	44 0f       	add	r20, r20
 604:	55 1f       	adc	r21, r21
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_vConnectInternalPullUp+0xbc>
 60a:	ba 01       	movw	r22, r20
 60c:	62 2b       	or	r22, r18
 60e:	65 bb       	out	0x15, r22	; 21
 610:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC, pinnumber);
 612:	25 b3       	in	r18, 0x15	; 21
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	ac 01       	movw	r20, r24
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_vConnectInternalPullUp+0xda>
 61c:	44 0f       	add	r20, r20
 61e:	55 1f       	adc	r21, r21
 620:	6a 95       	dec	r22
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_vConnectInternalPullUp+0xd6>
 624:	ba 01       	movw	r22, r20
 626:	60 95       	com	r22
 628:	62 23       	and	r22, r18
 62a:	65 bb       	out	0x15, r22	; 21
 62c:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if(enable == 1)
 62e:	41 30       	cpi	r20, 0x01	; 1
 630:	69 f4       	brne	.+26     	; 0x64c <DIO_vConnectInternalPullUp+0x106>
			{
				SET_BIT(PORTD, pinnumber);
 632:	22 b3       	in	r18, 0x12	; 18
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	ac 01       	movw	r20, r24
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_vConnectInternalPullUp+0xfa>
 63c:	44 0f       	add	r20, r20
 63e:	55 1f       	adc	r21, r21
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_vConnectInternalPullUp+0xf6>
 644:	ba 01       	movw	r22, r20
 646:	62 2b       	or	r22, r18
 648:	62 bb       	out	0x12, r22	; 18
 64a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD, pinnumber);
 64c:	22 b3       	in	r18, 0x12	; 18
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	ac 01       	movw	r20, r24
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_vConnectInternalPullUp+0x114>
 656:	44 0f       	add	r20, r20
 658:	55 1f       	adc	r21, r21
 65a:	6a 95       	dec	r22
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_vConnectInternalPullUp+0x110>
 65e:	ba 01       	movw	r22, r20
 660:	60 95       	com	r22
 662:	62 23       	and	r22, r18
 664:	62 bb       	out	0x12, r22	; 18
 666:	08 95       	ret

00000668 <DIO_vWriteLowNibble>:
	
}

void DIO_vWriteLowNibble(unsigned char portname, unsigned char nibblevalue)
{
	nibblevalue &= 0x0F;
 668:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 66a:	84 34       	cpi	r24, 0x44	; 68
 66c:	51 f1       	breq	.+84     	; 0x6c2 <DIO_vWriteLowNibble+0x5a>
 66e:	85 34       	cpi	r24, 0x45	; 69
 670:	38 f4       	brcc	.+14     	; 0x680 <DIO_vWriteLowNibble+0x18>
 672:	82 34       	cpi	r24, 0x42	; 66
 674:	c1 f0       	breq	.+48     	; 0x6a6 <DIO_vWriteLowNibble+0x3e>
 676:	83 34       	cpi	r24, 0x43	; 67
 678:	e8 f4       	brcc	.+58     	; 0x6b4 <DIO_vWriteLowNibble+0x4c>
 67a:	81 34       	cpi	r24, 0x41	; 65
 67c:	41 f5       	brne	.+80     	; 0x6ce <DIO_vWriteLowNibble+0x66>
 67e:	0c c0       	rjmp	.+24     	; 0x698 <DIO_vWriteLowNibble+0x30>
 680:	82 36       	cpi	r24, 0x62	; 98
 682:	89 f0       	breq	.+34     	; 0x6a6 <DIO_vWriteLowNibble+0x3e>
 684:	83 36       	cpi	r24, 0x63	; 99
 686:	18 f4       	brcc	.+6      	; 0x68e <DIO_vWriteLowNibble+0x26>
 688:	81 36       	cpi	r24, 0x61	; 97
 68a:	09 f5       	brne	.+66     	; 0x6ce <DIO_vWriteLowNibble+0x66>
 68c:	05 c0       	rjmp	.+10     	; 0x698 <DIO_vWriteLowNibble+0x30>
 68e:	83 36       	cpi	r24, 0x63	; 99
 690:	89 f0       	breq	.+34     	; 0x6b4 <DIO_vWriteLowNibble+0x4c>
 692:	84 36       	cpi	r24, 0x64	; 100
 694:	e1 f4       	brne	.+56     	; 0x6ce <DIO_vWriteLowNibble+0x66>
 696:	15 c0       	rjmp	.+42     	; 0x6c2 <DIO_vWriteLowNibble+0x5a>
	{
		case 'A':
		case 'a':
			PORTA &= 0xF0;
 698:	8b b3       	in	r24, 0x1b	; 27
 69a:	80 7f       	andi	r24, 0xF0	; 240
 69c:	8b bb       	out	0x1b, r24	; 27
			PORTA |= nibblevalue;
 69e:	8b b3       	in	r24, 0x1b	; 27
 6a0:	68 2b       	or	r22, r24
 6a2:	6b bb       	out	0x1b, r22	; 27
			break;
 6a4:	08 95       	ret
		case 'B':
		case 'b':
			PORTB &= 0xF0;
 6a6:	88 b3       	in	r24, 0x18	; 24
 6a8:	80 7f       	andi	r24, 0xF0	; 240
 6aa:	88 bb       	out	0x18, r24	; 24
			PORTB |= nibblevalue;
 6ac:	88 b3       	in	r24, 0x18	; 24
 6ae:	68 2b       	or	r22, r24
 6b0:	68 bb       	out	0x18, r22	; 24
			break;
 6b2:	08 95       	ret
		case 'C':
		case 'c':
			PORTC &= 0xF0;
 6b4:	85 b3       	in	r24, 0x15	; 21
 6b6:	80 7f       	andi	r24, 0xF0	; 240
 6b8:	85 bb       	out	0x15, r24	; 21
			PORTC |= nibblevalue;
 6ba:	85 b3       	in	r24, 0x15	; 21
 6bc:	68 2b       	or	r22, r24
 6be:	65 bb       	out	0x15, r22	; 21
			break;
 6c0:	08 95       	ret
		case 'D':
		case 'd':
			PORTD &= 0xF0;
 6c2:	82 b3       	in	r24, 0x12	; 18
 6c4:	80 7f       	andi	r24, 0xF0	; 240
 6c6:	82 bb       	out	0x12, r24	; 18
			PORTD |= nibblevalue;
 6c8:	82 b3       	in	r24, 0x12	; 18
 6ca:	68 2b       	or	r22, r24
 6cc:	62 bb       	out	0x12, r22	; 18
 6ce:	08 95       	ret

000006d0 <DIO_vWriteHighNibble>:
	}
}

void DIO_vWriteHighNibble(unsigned char portname, unsigned char nibblevalue)
{
	nibblevalue <<= 4;
 6d0:	62 95       	swap	r22
 6d2:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 6d4:	84 34       	cpi	r24, 0x44	; 68
 6d6:	51 f1       	breq	.+84     	; 0x72c <DIO_vWriteHighNibble+0x5c>
 6d8:	85 34       	cpi	r24, 0x45	; 69
 6da:	38 f4       	brcc	.+14     	; 0x6ea <DIO_vWriteHighNibble+0x1a>
 6dc:	82 34       	cpi	r24, 0x42	; 66
 6de:	c1 f0       	breq	.+48     	; 0x710 <DIO_vWriteHighNibble+0x40>
 6e0:	83 34       	cpi	r24, 0x43	; 67
 6e2:	e8 f4       	brcc	.+58     	; 0x71e <DIO_vWriteHighNibble+0x4e>
 6e4:	81 34       	cpi	r24, 0x41	; 65
 6e6:	41 f5       	brne	.+80     	; 0x738 <DIO_vWriteHighNibble+0x68>
 6e8:	0c c0       	rjmp	.+24     	; 0x702 <DIO_vWriteHighNibble+0x32>
 6ea:	82 36       	cpi	r24, 0x62	; 98
 6ec:	89 f0       	breq	.+34     	; 0x710 <DIO_vWriteHighNibble+0x40>
 6ee:	83 36       	cpi	r24, 0x63	; 99
 6f0:	18 f4       	brcc	.+6      	; 0x6f8 <DIO_vWriteHighNibble+0x28>
 6f2:	81 36       	cpi	r24, 0x61	; 97
 6f4:	09 f5       	brne	.+66     	; 0x738 <DIO_vWriteHighNibble+0x68>
 6f6:	05 c0       	rjmp	.+10     	; 0x702 <DIO_vWriteHighNibble+0x32>
 6f8:	83 36       	cpi	r24, 0x63	; 99
 6fa:	89 f0       	breq	.+34     	; 0x71e <DIO_vWriteHighNibble+0x4e>
 6fc:	84 36       	cpi	r24, 0x64	; 100
 6fe:	e1 f4       	brne	.+56     	; 0x738 <DIO_vWriteHighNibble+0x68>
 700:	15 c0       	rjmp	.+42     	; 0x72c <DIO_vWriteHighNibble+0x5c>
	{
		case 'A':
		case 'a':
		PORTA &= 0x0F;
 702:	8b b3       	in	r24, 0x1b	; 27
 704:	8f 70       	andi	r24, 0x0F	; 15
 706:	8b bb       	out	0x1b, r24	; 27
		PORTA |= nibblevalue;
 708:	8b b3       	in	r24, 0x1b	; 27
 70a:	68 2b       	or	r22, r24
 70c:	6b bb       	out	0x1b, r22	; 27
		break;
 70e:	08 95       	ret
		case 'B':
		case 'b':
		PORTB &= 0x0F;
 710:	88 b3       	in	r24, 0x18	; 24
 712:	8f 70       	andi	r24, 0x0F	; 15
 714:	88 bb       	out	0x18, r24	; 24
		PORTB |= nibblevalue;
 716:	88 b3       	in	r24, 0x18	; 24
 718:	68 2b       	or	r22, r24
 71a:	68 bb       	out	0x18, r22	; 24
		break;
 71c:	08 95       	ret
		case 'C':
		case 'c':
		PORTC &= 0x0F;
 71e:	85 b3       	in	r24, 0x15	; 21
 720:	8f 70       	andi	r24, 0x0F	; 15
 722:	85 bb       	out	0x15, r24	; 21
		PORTC |= nibblevalue;
 724:	85 b3       	in	r24, 0x15	; 21
 726:	68 2b       	or	r22, r24
 728:	65 bb       	out	0x15, r22	; 21
		break;
 72a:	08 95       	ret
		case 'D':
		case 'd':
		PORTD &= 0x0F;
 72c:	82 b3       	in	r24, 0x12	; 18
 72e:	8f 70       	andi	r24, 0x0F	; 15
 730:	82 bb       	out	0x12, r24	; 18
		PORTD |= nibblevalue;
 732:	82 b3       	in	r24, 0x12	; 18
 734:	68 2b       	or	r22, r24
 736:	62 bb       	out	0x12, r22	; 18
 738:	08 95       	ret

0000073a <EEPROM_vWrite>:
#include <avr/io.h>

void EEPROM_vWrite(unsigned short address, unsigned char data)
{
	// Put the given address in the EEPROM Address Register
	EEAR = address;
 73a:	9f bb       	out	0x1f, r25	; 31
 73c:	8e bb       	out	0x1e, r24	; 30
	// Put the given data in the EEPROM Data Register
	EEDR = data;
 73e:	6d bb       	out	0x1d, r22	; 29
	//Enable EEPROM Master Write Enable pin in EECR
	SET_BIT(EECR, EEMWE);
 740:	e2 9a       	sbi	0x1c, 2	; 28
	//Enable EEPROM Write Enable pin in EECR
	SET_BIT(EECR, EEWE);
 742:	e1 9a       	sbi	0x1c, 1	; 28
	//Checking if EEPROM Write Enable pin returned to 0
	while(READ_BIT(EECR, EEWE));
 744:	e1 99       	sbic	0x1c, 1	; 28
 746:	fe cf       	rjmp	.-4      	; 0x744 <EEPROM_vWrite+0xa>
}
 748:	08 95       	ret

0000074a <EEPROM_vRead>:

unsigned char EEPROM_vRead(unsigned short address)
{
	//Put the given address in the EEPROM Address Register
	EEAR = address;
 74a:	9f bb       	out	0x1f, r25	; 31
 74c:	8e bb       	out	0x1e, r24	; 30
	//Enable EEPROM Read Enable pin in EECR
	SET_BIT(EECR, EERE);
 74e:	e0 9a       	sbi	0x1c, 0	; 28
	//Return the data from EEPROM Data Register
	return EEDR;
 750:	8d b3       	in	r24, 0x1d	; 29
 752:	08 95       	ret

00000754 <KEYPAD_vInit>:
#include "KEYPAD.h"

void KEYPAD_vInit(unsigned char portname)
{
 754:	cf 93       	push	r28
 756:	c8 2f       	mov	r28, r24
	DIO_vSetPortDirection(portname, 0x0F);
 758:	6f e0       	ldi	r22, 0x0F	; 15
 75a:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_vSetPortDirection>
	DIO_vConnectInternalPullUp(portname, PIN4, ENABLE);
 75e:	8c 2f       	mov	r24, r28
 760:	64 e0       	ldi	r22, 0x04	; 4
 762:	41 e0       	ldi	r20, 0x01	; 1
 764:	0e 94 a3 02 	call	0x546	; 0x546 <DIO_vConnectInternalPullUp>
	DIO_vConnectInternalPullUp(portname, PIN5, ENABLE);
 768:	8c 2f       	mov	r24, r28
 76a:	65 e0       	ldi	r22, 0x05	; 5
 76c:	41 e0       	ldi	r20, 0x01	; 1
 76e:	0e 94 a3 02 	call	0x546	; 0x546 <DIO_vConnectInternalPullUp>
	DIO_vConnectInternalPullUp(portname, PIN6, ENABLE);
 772:	8c 2f       	mov	r24, r28
 774:	66 e0       	ldi	r22, 0x06	; 6
 776:	41 e0       	ldi	r20, 0x01	; 1
 778:	0e 94 a3 02 	call	0x546	; 0x546 <DIO_vConnectInternalPullUp>
	DIO_vConnectInternalPullUp(portname, PIN7, ENABLE);
 77c:	8c 2f       	mov	r24, r28
 77e:	67 e0       	ldi	r22, 0x07	; 7
 780:	41 e0       	ldi	r20, 0x01	; 1
 782:	0e 94 a3 02 	call	0x546	; 0x546 <DIO_vConnectInternalPullUp>
}
 786:	cf 91       	pop	r28
 788:	08 95       	ret

0000078a <KEYPAD_u8Read>:

unsigned char KEYPAD_u8Read(unsigned char portname)
{
 78a:	cf 92       	push	r12
 78c:	df 92       	push	r13
 78e:	ff 92       	push	r15
 790:	0f 93       	push	r16
 792:	1f 93       	push	r17
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	cd b7       	in	r28, 0x3d	; 61
 79a:	de b7       	in	r29, 0x3e	; 62
 79c:	60 97       	sbiw	r28, 0x10	; 16
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	f8 94       	cli
 7a2:	de bf       	out	0x3e, r29	; 62
 7a4:	0f be       	out	0x3f, r0	; 63
 7a6:	cd bf       	out	0x3d, r28	; 61
 7a8:	f8 2e       	mov	r15, r24
	unsigned char arr[4][4] = { {'7','8','9','/'}, {'4','5','6','*'}, {'1','2','3','+'}, {'A', '0', '=', '-'} };
 7aa:	de 01       	movw	r26, r28
 7ac:	11 96       	adiw	r26, 0x01	; 1
 7ae:	e0 e6       	ldi	r30, 0x60	; 96
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 e1       	ldi	r24, 0x10	; 16
 7b4:	01 90       	ld	r0, Z+
 7b6:	0d 92       	st	X+, r0
 7b8:	81 50       	subi	r24, 0x01	; 1
 7ba:	e1 f7       	brne	.-8      	; 0x7b4 <KEYPAD_u8Read+0x2a>
 7bc:	cc 24       	eor	r12, r12
 7be:	dd 24       	eor	r13, r13
	char row, col;
	char return_val = NOTPRESSED;
	for(row = 0; row <= 3; row++)
	{
		DIO_vWriteLowNibble(portname, 0x0F);
 7c0:	8f 2d       	mov	r24, r15
 7c2:	6f e0       	ldi	r22, 0x0F	; 15
 7c4:	0e 94 34 03 	call	0x668	; 0x668 <DIO_vWriteLowNibble>
		DIO_vWritePin(portname, row, 0);
 7c8:	8f 2d       	mov	r24, r15
 7ca:	6c 2d       	mov	r22, r12
 7cc:	40 e0       	ldi	r20, 0x00	; 0
 7ce:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
		for(col = 0; col <= 3; col++)
 7d2:	10 e0       	ldi	r17, 0x00	; 0
	DIO_vConnectInternalPullUp(portname, PIN5, ENABLE);
	DIO_vConnectInternalPullUp(portname, PIN6, ENABLE);
	DIO_vConnectInternalPullUp(portname, PIN7, ENABLE);
}

unsigned char KEYPAD_u8Read(unsigned char portname)
 7d4:	01 2f       	mov	r16, r17
 7d6:	0c 5f       	subi	r16, 0xFC	; 252
	{
		DIO_vWriteLowNibble(portname, 0x0F);
		DIO_vWritePin(portname, row, 0);
		for(col = 0; col <= 3; col++)
		{
			if(DIO_u8ReadPin(portname, col + 4) == 0)
 7d8:	8f 2d       	mov	r24, r15
 7da:	60 2f       	mov	r22, r16
 7dc:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_u8ReadPin>
 7e0:	88 23       	and	r24, r24
 7e2:	b9 f4       	brne	.+46     	; 0x812 <KEYPAD_u8Read+0x88>
			{
				while(!DIO_u8ReadPin(portname, col + 4));
 7e4:	8f 2d       	mov	r24, r15
 7e6:	60 2f       	mov	r22, r16
 7e8:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_u8ReadPin>
 7ec:	88 23       	and	r24, r24
 7ee:	d1 f3       	breq	.-12     	; 0x7e4 <KEYPAD_u8Read+0x5a>
				return_val = arr[row][col];
 7f0:	f6 01       	movw	r30, r12
 7f2:	ee 0f       	add	r30, r30
 7f4:	ff 1f       	adc	r31, r31
 7f6:	ee 0f       	add	r30, r30
 7f8:	ff 1f       	adc	r31, r31
 7fa:	e1 0f       	add	r30, r17
 7fc:	f1 1d       	adc	r31, r1
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	8c 0f       	add	r24, r28
 804:	9d 1f       	adc	r25, r29
 806:	e8 0f       	add	r30, r24
 808:	f9 1f       	adc	r31, r25
 80a:	80 81       	ld	r24, Z
			else
			{
				
			}
		}
		if(return_val != NOTPRESSED)
 80c:	8f 3f       	cpi	r24, 0xFF	; 255
 80e:	21 f0       	breq	.+8      	; 0x818 <KEYPAD_u8Read+0x8e>
 810:	0b c0       	rjmp	.+22     	; 0x828 <KEYPAD_u8Read+0x9e>
	char return_val = NOTPRESSED;
	for(row = 0; row <= 3; row++)
	{
		DIO_vWriteLowNibble(portname, 0x0F);
		DIO_vWritePin(portname, row, 0);
		for(col = 0; col <= 3; col++)
 812:	1f 5f       	subi	r17, 0xFF	; 255
 814:	14 30       	cpi	r17, 0x04	; 4
 816:	f1 f6       	brne	.-68     	; 0x7d4 <KEYPAD_u8Read+0x4a>
 818:	08 94       	sec
 81a:	c1 1c       	adc	r12, r1
 81c:	d1 1c       	adc	r13, r1
unsigned char KEYPAD_u8Read(unsigned char portname)
{
	unsigned char arr[4][4] = { {'7','8','9','/'}, {'4','5','6','*'}, {'1','2','3','+'}, {'A', '0', '=', '-'} };
	char row, col;
	char return_val = NOTPRESSED;
	for(row = 0; row <= 3; row++)
 81e:	94 e0       	ldi	r25, 0x04	; 4
 820:	c9 16       	cp	r12, r25
 822:	d1 04       	cpc	r13, r1
 824:	69 f6       	brne	.-102    	; 0x7c0 <KEYPAD_u8Read+0x36>
 826:	8f ef       	ldi	r24, 0xFF	; 255
		{
			
		}
	}
	return return_val;
 828:	60 96       	adiw	r28, 0x10	; 16
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	f8 94       	cli
 82e:	de bf       	out	0x3e, r29	; 62
 830:	0f be       	out	0x3f, r0	; 63
 832:	cd bf       	out	0x3d, r28	; 61
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	1f 91       	pop	r17
 83a:	0f 91       	pop	r16
 83c:	ff 90       	pop	r15
 83e:	df 90       	pop	r13
 840:	cf 90       	pop	r12
 842:	08 95       	ret

00000844 <LCD_vSendPulse>:
	#endif
}

static void LCD_vSendPulse(void)
{
	DIO_vWritePin(CONTROL_PORT, EN, ENABLE);
 844:	82 e4       	ldi	r24, 0x42	; 66
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	41 e0       	ldi	r20, 0x01	; 1
 84a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 84e:	8f e9       	ldi	r24, 0x9F	; 159
 850:	9f e0       	ldi	r25, 0x0F	; 15
 852:	01 97       	sbiw	r24, 0x01	; 1
 854:	f1 f7       	brne	.-4      	; 0x852 <LCD_vSendPulse+0xe>
 856:	00 c0       	rjmp	.+0      	; 0x858 <LCD_vSendPulse+0x14>
 858:	00 00       	nop
	_delay_ms(2);
	DIO_vWritePin(CONTROL_PORT, EN, DISABLE);
 85a:	82 e4       	ldi	r24, 0x42	; 66
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
 864:	8f e9       	ldi	r24, 0x9F	; 159
 866:	9f e0       	ldi	r25, 0x0F	; 15
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	f1 f7       	brne	.-4      	; 0x868 <__stack+0x9>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
 86e:	00 00       	nop
	_delay_ms(2);
}
 870:	08 95       	ret

00000872 <LCD_vSendCMD>:

void LCD_vSendCMD(unsigned char cmd)
{
 872:	cf 93       	push	r28
 874:	c8 2f       	mov	r28, r24
	#if defined eight_bit_mode
	DIO_vWritePin(CONTROL_PORT, RS, DISABLE);
 876:	82 e4       	ldi	r24, 0x42	; 66
 878:	61 e0       	ldi	r22, 0x01	; 1
 87a:	40 e0       	ldi	r20, 0x00	; 0
 87c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePort(LCD_PORT, cmd);
 880:	81 e4       	ldi	r24, 0x41	; 65
 882:	6c 2f       	mov	r22, r28
 884:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_vWritePort>
	LCD_vSendPulse();
 888:	0e 94 22 04 	call	0x844	; 0x844 <LCD_vSendPulse>
 88c:	8f ec       	ldi	r24, 0xCF	; 207
 88e:	97 e0       	ldi	r25, 0x07	; 7
 890:	01 97       	sbiw	r24, 0x01	; 1
 892:	f1 f7       	brne	.-4      	; 0x890 <LCD_vSendCMD+0x1e>
 894:	00 c0       	rjmp	.+0      	; 0x896 <LCD_vSendCMD+0x24>
 896:	00 00       	nop
	LCD_vSendPulse();
	DIO_vWriteHighNibble(LCD_PORT, cmd);
	LCD_vSendPulse();
	#endif
	_delay_ms(1);
}
 898:	cf 91       	pop	r28
 89a:	08 95       	ret

0000089c <LCD_vInit>:
 89c:	8f ef       	ldi	r24, 0xFF	; 255
 89e:	91 ee       	ldi	r25, 0xE1	; 225
 8a0:	a4 e0       	ldi	r26, 0x04	; 4
 8a2:	81 50       	subi	r24, 0x01	; 1
 8a4:	90 40       	sbci	r25, 0x00	; 0
 8a6:	a0 40       	sbci	r26, 0x00	; 0
 8a8:	e1 f7       	brne	.-8      	; 0x8a2 <LCD_vInit+0x6>
 8aa:	00 c0       	rjmp	.+0      	; 0x8ac <LCD_vInit+0x10>
 8ac:	00 00       	nop

void LCD_vInit()
{
	_delay_ms(200);
	#if defined eight_bit_mode
	DIO_vSetPortDirection(LCD_PORT, 0xFF);
 8ae:	81 e4       	ldi	r24, 0x41	; 65
 8b0:	6f ef       	ldi	r22, 0xFF	; 255
 8b2:	0e 94 1d 02 	call	0x43a	; 0x43a <DIO_vSetPortDirection>
	DIO_vsetPinDir(CONTROL_PORT, EN, OUTPUT);
 8b6:	82 e4       	ldi	r24, 0x42	; 66
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	41 e0       	ldi	r20, 0x01	; 1
 8bc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir(CONTROL_PORT, RS, OUTPUT);
 8c0:	82 e4       	ldi	r24, 0x42	; 66
 8c2:	61 e0       	ldi	r22, 0x01	; 1
 8c4:	41 e0       	ldi	r20, 0x01	; 1
 8c6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vsetPinDir(CONTROL_PORT, RW, OUTPUT);
 8ca:	82 e4       	ldi	r24, 0x42	; 66
 8cc:	62 e0       	ldi	r22, 0x02	; 2
 8ce:	41 e0       	ldi	r20, 0x01	; 1
 8d0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPinDir>
	DIO_vWritePin(CONTROL_PORT, RW, DISABLE);
 8d4:	82 e4       	ldi	r24, 0x42	; 66
 8d6:	62 e0       	ldi	r22, 0x02	; 2
 8d8:	40 e0       	ldi	r20, 0x00	; 0
 8da:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	LCD_vSendCMD(EIGHT_BITS);
 8de:	88 e3       	ldi	r24, 0x38	; 56
 8e0:	0e 94 39 04 	call	0x872	; 0x872 <LCD_vSendCMD>
 8e4:	af ec       	ldi	r26, 0xCF	; 207
 8e6:	b7 e0       	ldi	r27, 0x07	; 7
 8e8:	11 97       	sbiw	r26, 0x01	; 1
 8ea:	f1 f7       	brne	.-4      	; 0x8e8 <LCD_vInit+0x4c>
 8ec:	00 c0       	rjmp	.+0      	; 0x8ee <LCD_vInit+0x52>
 8ee:	00 00       	nop
	_delay_ms(1);
	LCD_vSendCMD(DISPLAY_ON_CURSOR_ON);
 8f0:	8c e0       	ldi	r24, 0x0C	; 12
 8f2:	0e 94 39 04 	call	0x872	; 0x872 <LCD_vSendCMD>
 8f6:	8f ec       	ldi	r24, 0xCF	; 207
 8f8:	97 e0       	ldi	r25, 0x07	; 7
 8fa:	01 97       	sbiw	r24, 0x01	; 1
 8fc:	f1 f7       	brne	.-4      	; 0x8fa <LCD_vInit+0x5e>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <LCD_vInit+0x64>
 900:	00 00       	nop
	_delay_ms(1);
	LCD_vSendCMD(CLR_SCREEN);
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	0e 94 39 04 	call	0x872	; 0x872 <LCD_vSendCMD>
 908:	af e1       	ldi	r26, 0x1F	; 31
 90a:	be e4       	ldi	r27, 0x4E	; 78
 90c:	11 97       	sbiw	r26, 0x01	; 1
 90e:	f1 f7       	brne	.-4      	; 0x90c <LCD_vInit+0x70>
 910:	00 c0       	rjmp	.+0      	; 0x912 <LCD_vInit+0x76>
 912:	00 00       	nop
	_delay_ms(10);
	LCD_vSendCMD(ENTRY_MODE);
 914:	86 e0       	ldi	r24, 0x06	; 6
 916:	0e 94 39 04 	call	0x872	; 0x872 <LCD_vSendCMD>
 91a:	8f ec       	ldi	r24, 0xCF	; 207
 91c:	97 e0       	ldi	r25, 0x07	; 7
 91e:	01 97       	sbiw	r24, 0x01	; 1
 920:	f1 f7       	brne	.-4      	; 0x91e <LCD_vInit+0x82>
 922:	00 c0       	rjmp	.+0      	; 0x924 <LCD_vInit+0x88>
 924:	00 00       	nop
	LCD_vSendCMD(CLR_SCREEN);
	_delay_ms(10);
	LCD_vSendCMD(ENTRY_MODE);
	_delay_ms(1);
	#endif
}
 926:	08 95       	ret

00000928 <LCD_vSendChar>:
	#endif
	_delay_ms(1);
}

LCD_vSendChar(unsigned char data)
{
 928:	cf 93       	push	r28
 92a:	c8 2f       	mov	r28, r24
	#if defined eight_bit_mode
	DIO_vWritePin(CONTROL_PORT, RS, ENABLE);
 92c:	82 e4       	ldi	r24, 0x42	; 66
 92e:	61 e0       	ldi	r22, 0x01	; 1
 930:	41 e0       	ldi	r20, 0x01	; 1
 932:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vWritePin>
	DIO_vWritePort(LCD_PORT, data);
 936:	81 e4       	ldi	r24, 0x41	; 65
 938:	6c 2f       	mov	r22, r28
 93a:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_vWritePort>
	LCD_vSendPulse();
 93e:	0e 94 22 04 	call	0x844	; 0x844 <LCD_vSendPulse>
	DIO_vWriteHighNibble(LCD_PORT, data >> 4);
	LCD_vSendPulse();
	DIO_vWriteHighNibble(LCD_PORT, data);
	LCD_vSendPulse();
	#endif
}
 942:	cf 91       	pop	r28
 944:	08 95       	ret

00000946 <LCD_vSendString>:

void LCD_vSendString(unsigned char *data)
{
 946:	cf 93       	push	r28
 948:	df 93       	push	r29
 94a:	ec 01       	movw	r28, r24
	while((*data) != 0)
 94c:	88 81       	ld	r24, Y
 94e:	88 23       	and	r24, r24
 950:	31 f0       	breq	.+12     	; 0x95e <LCD_vSendString+0x18>
	DIO_vWriteHighNibble(LCD_PORT, data);
	LCD_vSendPulse();
	#endif
}

void LCD_vSendString(unsigned char *data)
 952:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data) != 0)
	{
		LCD_vSendChar(*data);
 954:	0e 94 94 04 	call	0x928	; 0x928 <LCD_vSendChar>
	#endif
}

void LCD_vSendString(unsigned char *data)
{
	while((*data) != 0)
 958:	89 91       	ld	r24, Y+
 95a:	88 23       	and	r24, r24
 95c:	d9 f7       	brne	.-10     	; 0x954 <LCD_vSendString+0xe>
	{
		LCD_vSendChar(*data);
		data++;
	}
}
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	08 95       	ret

00000964 <LCD_vClearScreen>:

void LCD_vClearScreen()
{
	LCD_vSendCMD(CLR_SCREEN);
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	0e 94 39 04 	call	0x872	; 0x872 <LCD_vSendCMD>
 96a:	8f e1       	ldi	r24, 0x1F	; 31
 96c:	9e e4       	ldi	r25, 0x4E	; 78
 96e:	01 97       	sbiw	r24, 0x01	; 1
 970:	f1 f7       	brne	.-4      	; 0x96e <LCD_vClearScreen+0xa>
 972:	00 c0       	rjmp	.+0      	; 0x974 <LCD_vClearScreen+0x10>
 974:	00 00       	nop
	_delay_ms(10);
}
 976:	08 95       	ret

00000978 <LCD_vMoveCursor>:

void LCD_vMoveCursor(char row, char column)
{
	unsigned char data;
	if(row < 1 || row > 2 || column > 20 || column < 1)
 978:	98 2f       	mov	r25, r24
 97a:	91 50       	subi	r25, 0x01	; 1
 97c:	92 30       	cpi	r25, 0x02	; 2
 97e:	68 f4       	brcc	.+26     	; 0x99a <LCD_vMoveCursor+0x22>
 980:	65 31       	cpi	r22, 0x15	; 21
 982:	58 f4       	brcc	.+22     	; 0x99a <LCD_vMoveCursor+0x22>
 984:	66 23       	and	r22, r22
 986:	49 f0       	breq	.+18     	; 0x99a <LCD_vMoveCursor+0x22>
	{
		data = 0x80;
	}
	else
	{
		if(row == 1)
 988:	81 30       	cpi	r24, 0x01	; 1
 98a:	19 f4       	brne	.+6      	; 0x992 <LCD_vMoveCursor+0x1a>
		{
			data = 0x80 + column - 1;
 98c:	86 2f       	mov	r24, r22
 98e:	81 58       	subi	r24, 0x81	; 129
 990:	02 c0       	rjmp	.+4      	; 0x996 <LCD_vMoveCursor+0x1e>
		}
		else
		{
			data = 0xC0 + column - 1;
 992:	86 2f       	mov	r24, r22
 994:	81 54       	subi	r24, 0x41	; 65
		}
		LCD_vSendCMD(data);
 996:	0e 94 39 04 	call	0x872	; 0x872 <LCD_vSendCMD>
 99a:	08 95       	ret

0000099c <LCD_vSetCGRAMAddress>:
	}
}

void LCD_vSetCGRAMAddress(unsigned char address)
{
	if(address > 0x3F)
 99c:	80 34       	cpi	r24, 0x40	; 64
 99e:	20 f0       	brcs	.+8      	; 0x9a8 <LCD_vSetCGRAMAddress+0xc>
	{
		address = 0x80;
		LCD_vSendCMD(address);
 9a0:	80 e8       	ldi	r24, 0x80	; 128
 9a2:	0e 94 39 04 	call	0x872	; 0x872 <LCD_vSendCMD>
 9a6:	08 95       	ret
	}
	else
	{
		SET_BIT(address, 6);
 9a8:	80 64       	ori	r24, 0x40	; 64
		CLR_BIT(address, 7);
		LCD_vSendCMD(address);
 9aa:	8f 77       	andi	r24, 0x7F	; 127
 9ac:	0e 94 39 04 	call	0x872	; 0x872 <LCD_vSendCMD>
 9b0:	08 95       	ret

000009b2 <main>:
#define EEPROM_LOCATION3 0x23
#define EEPROM_LOCATION4 0x24
#define MAX_TRIES 3

int main(void)
{
 9b2:	4f 92       	push	r4
 9b4:	5f 92       	push	r5
 9b6:	6f 92       	push	r6
 9b8:	7f 92       	push	r7
 9ba:	8f 92       	push	r8
 9bc:	9f 92       	push	r9
 9be:	af 92       	push	r10
 9c0:	bf 92       	push	r11
 9c2:	df 92       	push	r13
 9c4:	ef 92       	push	r14
 9c6:	ff 92       	push	r15
 9c8:	0f 93       	push	r16
 9ca:	1f 93       	push	r17
 9cc:	cf 93       	push	r28
 9ce:	df 93       	push	r29
 9d0:	00 d0       	rcall	.+0      	; 0x9d2 <main+0x20>
 9d2:	00 d0       	rcall	.+0      	; 0x9d4 <main+0x22>
 9d4:	cd b7       	in	r28, 0x3d	; 61
 9d6:	de b7       	in	r29, 0x3e	; 62
	LCD_vInit();
 9d8:	0e 94 4e 04 	call	0x89c	; 0x89c <LCD_vInit>
	KEYPAD_vInit('D');
 9dc:	84 e4       	ldi	r24, 0x44	; 68
 9de:	0e 94 aa 03 	call	0x754	; 0x754 <KEYPAD_vInit>
	char arr[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 9e2:	8f ef       	ldi	r24, 0xFF	; 255
 9e4:	89 83       	std	Y+1, r24	; 0x01
 9e6:	8a 83       	std	Y+2, r24	; 0x02
 9e8:	8b 83       	std	Y+3, r24	; 0x03
 9ea:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char val = 0xFF;
	unsigned char flag = 0;
	int i;
	unsigned char tries = MAX_TRIES;
	if (EEPROM_vRead(EEPROM_STATUS) == 0xFF)
 9ec:	80 e2       	ldi	r24, 0x20	; 32
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	0e 94 a5 03 	call	0x74a	; 0x74a <EEPROM_vRead>
 9f4:	8f 3f       	cpi	r24, 0xFF	; 255
 9f6:	81 f5       	brne	.+96     	; 0xa58 <main+0xa6>
	{
		LCD_vSendString("SetPassword:");
 9f8:	80 e7       	ldi	r24, 0x70	; 112
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vSendString>
 a00:	0f 2e       	mov	r0, r31
 a02:	f1 e2       	ldi	r31, 0x21	; 33
 a04:	ef 2e       	mov	r14, r31
 a06:	ff 24       	eor	r15, r15
 a08:	f0 2d       	mov	r31, r0
		for(i = 0; i <= 3; i++)
		{
			do 
			{
				val = KEYPAD_u8Read('D');
 a0a:	84 e4       	ldi	r24, 0x44	; 68
 a0c:	0e 94 c5 03 	call	0x78a	; 0x78a <KEYPAD_u8Read>
 a10:	08 2f       	mov	r16, r24
			} while (val == NOTPRESSED);
 a12:	8f 3f       	cpi	r24, 0xFF	; 255
 a14:	d1 f3       	breq	.-12     	; 0xa0a <main+0x58>
			LCD_vSendChar(val);
 a16:	0e 94 94 04 	call	0x928	; 0x928 <LCD_vSendChar>
			LCD_vSendCMD(SHIFT_AC_LEFT);
 a1a:	80 e1       	ldi	r24, 0x10	; 16
 a1c:	0e 94 39 04 	call	0x872	; 0x872 <LCD_vSendCMD>
 a20:	8f ef       	ldi	r24, 0xFF	; 255
 a22:	90 e7       	ldi	r25, 0x70	; 112
 a24:	a2 e0       	ldi	r26, 0x02	; 2
 a26:	81 50       	subi	r24, 0x01	; 1
 a28:	90 40       	sbci	r25, 0x00	; 0
 a2a:	a0 40       	sbci	r26, 0x00	; 0
 a2c:	e1 f7       	brne	.-8      	; 0xa26 <main+0x74>
 a2e:	00 c0       	rjmp	.+0      	; 0xa30 <main+0x7e>
 a30:	00 00       	nop
			_delay_ms(100);
			LCD_vSendChar('*');
 a32:	8a e2       	ldi	r24, 0x2A	; 42
 a34:	0e 94 94 04 	call	0x928	; 0x928 <LCD_vSendChar>
			EEPROM_vWrite(EEPROM_LOCATION1 + i, val);
 a38:	c7 01       	movw	r24, r14
 a3a:	60 2f       	mov	r22, r16
 a3c:	0e 94 9d 03 	call	0x73a	; 0x73a <EEPROM_vWrite>
 a40:	08 94       	sec
 a42:	e1 1c       	adc	r14, r1
 a44:	f1 1c       	adc	r15, r1
	int i;
	unsigned char tries = MAX_TRIES;
	if (EEPROM_vRead(EEPROM_STATUS) == 0xFF)
	{
		LCD_vSendString("SetPassword:");
		for(i = 0; i <= 3; i++)
 a46:	95 e2       	ldi	r25, 0x25	; 37
 a48:	e9 16       	cp	r14, r25
 a4a:	f1 04       	cpc	r15, r1
 a4c:	f1 f6       	brne	.-68     	; 0xa0a <main+0x58>
			LCD_vSendCMD(SHIFT_AC_LEFT);
			_delay_ms(100);
			LCD_vSendChar('*');
			EEPROM_vWrite(EEPROM_LOCATION1 + i, val);
		}
		EEPROM_vWrite(EEPROM_STATUS, 0x00);
 a4e:	80 e2       	ldi	r24, 0x20	; 32
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	60 e0       	ldi	r22, 0x00	; 0
 a54:	0e 94 9d 03 	call	0x73a	; 0x73a <EEPROM_vWrite>
	unsigned char flag = 0;
	int i;
	unsigned char tries = MAX_TRIES;
	if (EEPROM_vRead(EEPROM_STATUS) == 0xFF)
	{
		LCD_vSendString("SetPassword:");
 a58:	0f 2e       	mov	r0, r31
 a5a:	f2 e3       	ldi	r31, 0x32	; 50
 a5c:	df 2e       	mov	r13, r31
 a5e:	f0 2d       	mov	r31, r0
		EEPROM_vWrite(EEPROM_STATUS, 0x00);
	}
	while(flag == 0)
	{
		LCD_vClearScreen();
		LCD_vSendString("EnterPassword:");
 a60:	0f 2e       	mov	r0, r31
 a62:	fd e7       	ldi	r31, 0x7D	; 125
 a64:	af 2e       	mov	r10, r31
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	bf 2e       	mov	r11, r31
 a6a:	f0 2d       	mov	r31, r0
#define EEPROM_LOCATION2 0x22
#define EEPROM_LOCATION3 0x23
#define EEPROM_LOCATION4 0x24
#define MAX_TRIES 3

int main(void)
 a6c:	0f 2e       	mov	r0, r31
 a6e:	f5 e0       	ldi	r31, 0x05	; 5
 a70:	ef 2e       	mov	r14, r31
 a72:	ff 24       	eor	r15, r15
 a74:	f0 2d       	mov	r31, r0
 a76:	ec 0e       	add	r14, r28
 a78:	fd 1e       	adc	r15, r29
				flag = 1;
			}
			else
			{
				LCD_vClearScreen();
				LCD_vSendString("You have ");
 a7a:	0f 2e       	mov	r0, r31
 a7c:	fa ec       	ldi	r31, 0xCA	; 202
 a7e:	8f 2e       	mov	r8, r31
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	9f 2e       	mov	r9, r31
 a84:	f0 2d       	mov	r31, r0
				LCD_vSendChar(tries + 48);
				LCD_vSendString(" left");
 a86:	0f 2e       	mov	r0, r31
 a88:	f4 ed       	ldi	r31, 0xD4	; 212
 a8a:	6f 2e       	mov	r6, r31
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	7f 2e       	mov	r7, r31
 a90:	f0 2d       	mov	r31, r0
				LCD_vMoveCursor(2, 1);
				LCD_vSendString("Try Again!");
 a92:	0f 2e       	mov	r0, r31
 a94:	fa ed       	ldi	r31, 0xDA	; 218
 a96:	4f 2e       	mov	r4, r31
 a98:	f0 e0       	ldi	r31, 0x00	; 0
 a9a:	5f 2e       	mov	r5, r31
 a9c:	f0 2d       	mov	r31, r0
		}
		EEPROM_vWrite(EEPROM_STATUS, 0x00);
	}
	while(flag == 0)
	{
		LCD_vClearScreen();
 a9e:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_vClearScreen>
		LCD_vSendString("EnterPassword:");
 aa2:	c5 01       	movw	r24, r10
 aa4:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vSendString>
 aa8:	8e 01       	movw	r16, r28
 aaa:	0f 5f       	subi	r16, 0xFF	; 255
 aac:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i = 0; i <= 3; i++)
		{
			do 
			{
				arr[i] = KEYPAD_u8Read('D');
 aae:	84 e4       	ldi	r24, 0x44	; 68
 ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <KEYPAD_u8Read>
 ab4:	d8 01       	movw	r26, r16
 ab6:	8c 93       	st	X, r24
			} while (arr[i] == 0xFF);
 ab8:	8f 3f       	cpi	r24, 0xFF	; 255
 aba:	c9 f3       	breq	.-14     	; 0xaae <main+0xfc>
			LCD_vSendChar(arr[i]);
 abc:	0e 94 94 04 	call	0x928	; 0x928 <LCD_vSendChar>
			LCD_vSendCMD(SHIFT_AC_LEFT);
 ac0:	80 e1       	ldi	r24, 0x10	; 16
 ac2:	0e 94 39 04 	call	0x872	; 0x872 <LCD_vSendCMD>
 ac6:	8f ef       	ldi	r24, 0xFF	; 255
 ac8:	90 e7       	ldi	r25, 0x70	; 112
 aca:	a2 e0       	ldi	r26, 0x02	; 2
 acc:	81 50       	subi	r24, 0x01	; 1
 ace:	90 40       	sbci	r25, 0x00	; 0
 ad0:	a0 40       	sbci	r26, 0x00	; 0
 ad2:	e1 f7       	brne	.-8      	; 0xacc <main+0x11a>
 ad4:	00 c0       	rjmp	.+0      	; 0xad6 <main+0x124>
 ad6:	00 00       	nop
			_delay_ms(100);
			LCD_vSendChar('*');
 ad8:	8a e2       	ldi	r24, 0x2A	; 42
 ada:	0e 94 94 04 	call	0x928	; 0x928 <LCD_vSendChar>
 ade:	0f 5f       	subi	r16, 0xFF	; 255
 ae0:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	while(flag == 0)
	{
		LCD_vClearScreen();
		LCD_vSendString("EnterPassword:");
		for(i = 0; i <= 3; i++)
 ae2:	0e 15       	cp	r16, r14
 ae4:	1f 05       	cpc	r17, r15
 ae6:	19 f7       	brne	.-58     	; 0xaae <main+0xfc>
			LCD_vSendChar(arr[i]);
			LCD_vSendCMD(SHIFT_AC_LEFT);
			_delay_ms(100);
			LCD_vSendChar('*');
		}
		if(EEPROM_vRead(EEPROM_LOCATION1) == arr[0] && EEPROM_vRead(EEPROM_LOCATION2) == arr[1] && EEPROM_vRead(EEPROM_LOCATION3) == arr[2] && EEPROM_vRead(EEPROM_LOCATION4) == arr[3])
 ae8:	81 e2       	ldi	r24, 0x21	; 33
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	0e 94 a5 03 	call	0x74a	; 0x74a <EEPROM_vRead>
 af0:	99 81       	ldd	r25, Y+1	; 0x01
 af2:	89 17       	cp	r24, r25
 af4:	21 f5       	brne	.+72     	; 0xb3e <main+0x18c>
 af6:	82 e2       	ldi	r24, 0x22	; 34
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	0e 94 a5 03 	call	0x74a	; 0x74a <EEPROM_vRead>
 afe:	9a 81       	ldd	r25, Y+2	; 0x02
 b00:	89 17       	cp	r24, r25
 b02:	e9 f4       	brne	.+58     	; 0xb3e <main+0x18c>
 b04:	83 e2       	ldi	r24, 0x23	; 35
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	0e 94 a5 03 	call	0x74a	; 0x74a <EEPROM_vRead>
 b0c:	9b 81       	ldd	r25, Y+3	; 0x03
 b0e:	89 17       	cp	r24, r25
 b10:	b1 f4       	brne	.+44     	; 0xb3e <main+0x18c>
 b12:	84 e2       	ldi	r24, 0x24	; 36
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 a5 03 	call	0x74a	; 0x74a <EEPROM_vRead>
 b1a:	9c 81       	ldd	r25, Y+4	; 0x04
 b1c:	89 17       	cp	r24, r25
 b1e:	79 f4       	brne	.+30     	; 0xb3e <main+0x18c>
		{
			LCD_vClearScreen();
 b20:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_vClearScreen>
			LCD_vSendString("Correct Password");
 b24:	8c e8       	ldi	r24, 0x8C	; 140
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vSendString>
			LCD_vMoveCursor(2, 1);
 b2c:	82 e0       	ldi	r24, 0x02	; 2
 b2e:	61 e0       	ldi	r22, 0x01	; 1
 b30:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_vMoveCursor>
			LCD_vSendString("Safe is opened");
 b34:	8d e9       	ldi	r24, 0x9D	; 157
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vSendString>
			flag = 1;
 b3c:	2f c0       	rjmp	.+94     	; 0xb9c <main+0x1ea>
		}
		else
		{
			tries--;
			if(tries == 0)
 b3e:	90 e3       	ldi	r25, 0x30	; 48
 b40:	d9 16       	cp	r13, r25
 b42:	79 f4       	brne	.+30     	; 0xb62 <main+0x1b0>
			{
				LCD_vClearScreen();
 b44:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_vClearScreen>
				LCD_vSendString("Tries are over");
 b48:	8c ea       	ldi	r24, 0xAC	; 172
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vSendString>
				LCD_vMoveCursor(2, 1);
 b50:	82 e0       	ldi	r24, 0x02	; 2
 b52:	61 e0       	ldi	r22, 0x01	; 1
 b54:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_vMoveCursor>
				LCD_vSendString("Safe is closed");
 b58:	8b eb       	ldi	r24, 0xBB	; 187
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vSendString>
 b60:	1d c0       	rjmp	.+58     	; 0xb9c <main+0x1ea>
				flag = 1;
			}
			else
			{
				LCD_vClearScreen();
 b62:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_vClearScreen>
				LCD_vSendString("You have ");
 b66:	c4 01       	movw	r24, r8
 b68:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vSendString>
				LCD_vSendChar(tries + 48);
 b6c:	8d 2d       	mov	r24, r13
 b6e:	0e 94 94 04 	call	0x928	; 0x928 <LCD_vSendChar>
				LCD_vSendString(" left");
 b72:	c3 01       	movw	r24, r6
 b74:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vSendString>
				LCD_vMoveCursor(2, 1);
 b78:	82 e0       	ldi	r24, 0x02	; 2
 b7a:	61 e0       	ldi	r22, 0x01	; 1
 b7c:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_vMoveCursor>
				LCD_vSendString("Try Again!");
 b80:	c2 01       	movw	r24, r4
 b82:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_vSendString>
 b86:	8f ef       	ldi	r24, 0xFF	; 255
 b88:	93 ed       	ldi	r25, 0xD3	; 211
 b8a:	a0 e3       	ldi	r26, 0x30	; 48
 b8c:	81 50       	subi	r24, 0x01	; 1
 b8e:	90 40       	sbci	r25, 0x00	; 0
 b90:	a0 40       	sbci	r26, 0x00	; 0
 b92:	e1 f7       	brne	.-8      	; 0xb8c <main+0x1da>
 b94:	00 c0       	rjmp	.+0      	; 0xb96 <main+0x1e4>
 b96:	00 00       	nop
 b98:	da 94       	dec	r13
 b9a:	81 cf       	rjmp	.-254    	; 0xa9e <main+0xec>
				_delay_ms(2000);
			}
		}
	}
 b9c:	80 e0       	ldi	r24, 0x00	; 0
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	0f 90       	pop	r0
 ba2:	0f 90       	pop	r0
 ba4:	0f 90       	pop	r0
 ba6:	0f 90       	pop	r0
 ba8:	df 91       	pop	r29
 baa:	cf 91       	pop	r28
 bac:	1f 91       	pop	r17
 bae:	0f 91       	pop	r16
 bb0:	ff 90       	pop	r15
 bb2:	ef 90       	pop	r14
 bb4:	df 90       	pop	r13
 bb6:	bf 90       	pop	r11
 bb8:	af 90       	pop	r10
 bba:	9f 90       	pop	r9
 bbc:	8f 90       	pop	r8
 bbe:	7f 90       	pop	r7
 bc0:	6f 90       	pop	r6
 bc2:	5f 90       	pop	r5
 bc4:	4f 90       	pop	r4
 bc6:	08 95       	ret

00000bc8 <_exit>:
 bc8:	f8 94       	cli

00000bca <__stop_program>:
 bca:	ff cf       	rjmp	.-2      	; 0xbca <__stop_program>
